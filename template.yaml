AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    SAM with PR validation collection
    1. Standard Check
    2. CodeFreeze w/ GitHub Check + Slack Command
    3. Quality Check w/ GitHub Check + CircleCI WebHook

Parameters:
    GitHubToken:
        Type: String
        Description: >
            Token used to update PR status and write comments (aka summaries).
            Token provided should have permissions for repo and write:discussion.

    GitHubUser:
        Type: String
        Description: >
            The username assigned for the GitHubToken user (e.g. guilatrova).
            It's used to double check when a summary should be whether edited or deleted.

    CircleCIToken:
        Type: String
        Description: Token used to get artifacts links from a specific build

    StandardDocs:
        Type: String
        Default: ""
        Description: >
            Link to the standards document.
            It will be added to the Guidelines Report.

Globals:
    Function:
        Timeout: 10
        Runtime: python3.7
        Environment:
            Variables:
                GITHUB_TOKEN: !Ref GitHubToken
                GITHUB_USER: !Ref GitHubUser

Resources:

    # Pull Request Standards
    PullRequestStandardCheckFunction:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: StandardCheck_PullRequest
            Description: >
                Updates status and provides a detailed summary
                for any changes made to a GitHub PullRequest
                based on company guidelines.
            CodeUri: src/
            Handler: pr_standard.handler
            Environment:
                Variables:
                    DOCS_STANDARD_LINK: !Ref StandardDocs
            Events:
                Webhook:
                    Type: Api
                    Properties:
                        Path: /standard
                        Method: post

    # Code Freeze (Slack + Pull Request)
    # CodeFreezerSlashFunction:
    #     Type: AWS::Serverless::Function
    #     Properties:
    #         FunctionName: CodeFreeze_SlashFunction
    #         Description: Handles commands sent from Slack (e.g. enable code freeze).
    #         CodeUri: src/
    #         Handler: codefreezer.slack_handler
    #         Policies:
    #             - DynamoDBCrudPolicy:
    #                 TableName: !Ref CodeFreezeConfigTable
    #         Environment:
    #             Variables:
    #                 REPOS: guilatrova/Github-Lambda-Status-Checks # Multiple repos should be separated by a comma
    #                 AUTHORIZED: Guilherme # The slack username. Multiple usernames should be separed by a comma
    #         Events:
    #             Webhook:
    #                 Type: Api
    #                 Properties:
    #                     Path: /codefreeze
    #                     Method: post

    # PullRequestCodeFreezeCheckFunction:
    #     Type: AWS::Serverless::Function
    #     Properties:
    #         FunctionName: CodeFreezeCheck_PullRequest
    #         Description: >
    #             Updates status for any changes made to a GitHub PullRequest (e.g. open a PR or update commits),
    #             based on Code Freeze status (enabled/disabled).
    #         CodeUri: src/
    #         Handler: codefreezer.gh_handler
    #         Policies:
    #             - DynamoDBReadPolicy:
    #                 TableName: !Ref CodeFreezeConfigTable
    #         Events:
    #             Webhook:
    #                 Type: Api
    #                 Properties:
    #                     Path: /codefreeze-status
    #                     Method: post

    # CodeFreezeConfigTable:
    #     Type: AWS::Serverless::SimpleTable
    #     Properties:
    #         TableName: CodeFreezeConfig
    #         PrimaryKey:
    #             Name: ConfigName
    #             Type: String

    # Quality Reports (CI + Pull Request)
    CIReportsFunction:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: QualityCheck_CI_Reports
            Description: >
                Function to be invoked by CircleCI after reports were uploaded to S3.
                This function reads those reports, saves to DynamoDB, and then
                IF a PR is open, provide a status validation for Coverage and Quality.
            CodeUri: src/
            Handler: quality_summary.ci_handler
            Policies:
                - DynamoDBCrudPolicy:
                    TableName: !Ref QualityReportsTable
                - S3ReadPolicy:
                    BucketName: !Ref QualityReportsBucket
            Environment:
                Variables:
                    BUCKET_NAME: !Ref QualityReportsBucket
                    CIRCLECI_TOKEN: !Ref CircleCIToken
            Events:
                Webhook:
                    Type: Api
                    Properties:
                        Path: /ci-results
                        Method: post

    PullRequestQualityCheckFunction:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: QualityCheck_PullRequest
            Description: >
                Updates status and provides a detailed summary
                for any changes made to a GitHub PullRequest (e.g. new commits added)
                regarding Coverage and Quality.
                This function reads reports saved previously in DynamoDB.
            CodeUri: src/
            Handler: quality_summary.gh_handler
            Policies:
                - DynamoDBReadPolicy:
                    TableName: !Ref QualityReportsTable
            Environment:
                Variables:
                    CIRCLECI_TOKEN: !Ref CircleCIToken
            Events:
                Webhook:
                    Type: Api
                    Properties:
                        Path: /quality-status
                        Method: post

    QualityReportsTable:
        Type: AWS::Serverless::SimpleTable
        Properties:
            TableName: QualityReports
            PrimaryKey:
                Name: commit_sha
                Type: String

    QualityReportsBucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: finetune-ci-quality-reports
